package up2p.core;

import java.io.Serializable;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import up2p.search.TrustMetric;

/**
 * An entry for a location where a resource can be obtained.
 * 
 * @author Neal Arthorne
 * @version 1.0
 */
public class LocationEntry implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	/** IP address of the serving peer */
    private String hostIp;
    
    /** Port of the serving peer */
    private int hostPort;
    
    /** Url Prefix of the serving peer */
    private String hostUrlPrefix;
    
    /** 
     * A map of all trust metrics associated with this locationEntry, keyed by the
     * TrustMetric name
     * 
     * i.e. Map<MetricName, TrustMetric>
     * 
     * Each metric can have only one associated value, and if a new value is
     * provided the original will be replaced.
     */
    private Map <String, TrustMetric> metrics;
    
    /**
     * Rebuilds a location entry from the location string generated by
     * getLocationString()
     * 
     * @param locationString	A location string in the format
     * 							"hostname:port/urlPrefix"
     */
    public LocationEntry(String locationString) {
    	this.hostIp = locationString.substring(0, locationString.lastIndexOf(":"));
    	this.hostPort = Integer.parseInt(locationString.substring(locationString.lastIndexOf(":") + 1,
    			locationString.lastIndexOf("/")));
    	this.hostUrlPrefix = locationString.substring(locationString.lastIndexOf("/") + 1);
    	metrics = new TreeMap<String, TrustMetric>();
    }

    /**
     * Constructs an entry with the given location.
     * 
     * @param	ip	The IP address of the serving peer
     * @param 	port	The port of the serving peer
     * @param 	urlPrefix	The url prefix of the serving peer
     */
    public LocationEntry(String ip, int port, String urlPrefix) {
    	hostIp = ip;
    	hostPort = port;
    	hostUrlPrefix = urlPrefix;
        metrics = new TreeMap<String, TrustMetric>();
    }

    /**
     * Returns true if the location matches that of the given object.
     * 
     * @param o the object to compare to this entry
     * @return true if the location is equal, false otherwise
     */
    public boolean equals(Object o) {
        if (o instanceof LocationEntry) {
            return (this.hostIp.equals(((LocationEntry) o).hostIp)
            		&& this.hostPort ==((LocationEntry) o).hostPort
            		&& this.hostUrlPrefix.equals(((LocationEntry) o).hostUrlPrefix));
        }
        return false;
    }
    
    /**
     * @return	The IP:Port string of the host of this location entry
     */
    public String getHostIpPort() {
    	return hostIp + ":" + Integer.toString(hostPort);
    }
    
    /**
     * @return	The url prefix of the serving peer
     */
    public String getUrlPrefix() {
    	return hostUrlPrefix;
    }
    
    /**
     * Adds a new trust metric to the list of stored metrics for this location entry.
     * Adding a new value for an existing metric will replace the original value.
     * 
     * @param metricName	The name of the metric to store (ex. "Jaccard")
     * @param metricValue	The TrustMetric object representing the metric
     */
    public void addTrustMetric(String metricName, TrustMetric metric) {
    	if(metrics.containsKey(metricName)) {
    		metrics.remove(metricName);
    	}
    	metrics.put(metricName, metric);
    }
    
    /**
     * Fetches the value for a trust metric, indexed by name.
     * 
     * @param metricName	The name of the metric value to fetch (ex. "Jaccard")
     * @return	The value of the metric with the specified name, or null if no such metric 
     *					exists.
     */
    public String getTrustMetric(String metricName) {
    	if (metrics.containsKey(metricName)) {
    		return metrics.get(metricName).getValue();
    	}
    	
    	return null;
    }
    
    /**
     * @return	The complete string representation of the location
     * 			(i.e. "hostname:port/urlPrefix")
     */
    public String getLocationString() {
    	return getHostIpPort() + "/" + getUrlPrefix();
    }
}