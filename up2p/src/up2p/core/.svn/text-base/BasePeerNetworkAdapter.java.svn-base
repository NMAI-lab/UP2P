package up2p.core;

import java.io.File;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.apache.log4j.Logger;

import up2p.search.SearchMetricListener;
import up2p.search.SearchResponse;
import up2p.search.SearchResponseListener;
import up2p.servlet.HttpParams;
import up2p.util.FileUtil;

/**
 * Skeleton class that should be extended to implement a
 * <code>NetworkAdapter</code>. Provides basic support for setting/getting
 * properties, firing search response events and retrieving files and
 * attachments.
 * 
 * @author Neal Arthorne
 * @version 1.0
 */
public abstract class BasePeerNetworkAdapter implements NetworkAdapter {
    /** Protocol that can be handled by this adapter. */
    public static final String HTTP_PROTOCOL = "http";

	private static final String LOGGER = "up2p.peer.jtella";

    /** Logger used by this class. */
    private static Logger LOG = Logger.getLogger(LOGGER);

    /** The WebAdapter used by this peer client. */
    protected Core2Network adapter;

    /** Community ID associated with this adapter. */
    protected String associatedCommunityId;

    /** Network Adapter info for this adapter. */
    protected NetworkAdapterInfo networkAdapterInfo;

    /** Properties of the adapter. */
    protected Hashtable<String,String> properties;

    /** Sets of search response listeners. */
    protected Set<SearchResponseListener> searchResponseListeners;
    
    /** Sets of search response listeners. */
    protected Set<SearchMetricListener> searchMetricListeners;

    /**
     * Construct an empty adapter.
     */
    public BasePeerNetworkAdapter() {
        properties = new Hashtable<String,String>();
        searchResponseListeners = new HashSet<SearchResponseListener>();
        searchMetricListeners = new HashSet<SearchMetricListener>();
    }

    /*
     * @see up2p.core.NetworkAdapter#addSearchResponseListener(up2p.search.SearchResponseListener)
     */
    public void addSearchResponseListener(SearchResponseListener listener) {
        searchResponseListeners.add(listener);
    }
    
    /*
     * @see up2p.core.NetworkAdapter#addSearchMetricListener(up2p.search.SearchMetricListener)
     */
    public void addSearchMetricListener(SearchMetricListener listener) {
        searchMetricListeners.add(listener);
    }

    /**
     * Fires the given search responses to all registered search listeners.
     * 
     * @param responses response(s) to send to the listeners
     */
    protected void fireSearchResponse(SearchResponse[] responses) {
        Iterator<SearchResponseListener> i = searchResponseListeners.iterator();
        int cnt =0;
        while (i.hasNext()) {
            SearchResponseListener listener = i.next();
            listener.receiveSearchResponse(responses);
            cnt++;
        }
        LOG.debug("BasePeerNetwork Adapter: Sent search " + responses.length + 
        		" responses to "+ String.valueOf(cnt)+" listeners");
    }
    
    /**
     * Fires the given list of network resources to all registered search metric listeners.
     * @param peerIdentifier	The IP/Port of the network peer
     * @param communityId	The community id of the resource list
     * @param netResIds	The list of resource id's in the specified community that the network
     * 									peer is hosting.
     */
    protected void fireNetworkResourceList(String peerIdentifier, String communityId, List<String> netResIds) {
        Iterator<SearchMetricListener> i = searchMetricListeners.iterator();
        int cnt =0;
        while (i.hasNext()) {
            SearchMetricListener listener = i.next();
            listener.receiveNetworkResourceList(peerIdentifier, communityId, netResIds);
            cnt++;
        }
        LOG.debug("BasePeerNetwork Adapter: Sent network resource list to "+ String.valueOf(cnt)+"listeners");
    }
    
    protected void fireTrustMetric(String peerIdentifier, String communityId, String metricName, String metricValue) {
        Iterator<SearchMetricListener> i = searchMetricListeners.iterator();
        int cnt =0;
        while (i.hasNext()) {
            SearchMetricListener listener = i.next();
            listener.receiveMetricValue(peerIdentifier, communityId, metricName, metricValue);
            cnt++;
        }
        LOG.debug("BasePeerNetwork Adapter: Sent trust metric (" + metricName + ") to "+ String.valueOf(cnt)+" listeners");
    }

    /*
     * @see up2p.core.NetworkAdapter#getNetworkAdapterInfo()
     */
    public NetworkAdapterInfo getNetworkAdapterInfo() {
        return networkAdapterInfo;
    }

    /*
     * @see up2p.core.ResourceProperties#getProperty(String)
     */
    public String getProperty(String propertyName) {
        String o = properties.get(propertyName);
        return o;
        /*if (o != null)
            return (String) o;
        return null;*/
    }

    /*
     * @see up2p.core.ResourceProperties#getPropertyNames()
     */
    public Enumeration<String> getPropertyNames() {
        return properties.keys();
    }

    /*
     * @see up2p.core.NetworkAdapter#removeSearchResponseListener(up2p.search.SearchResponseListener)
     */
    public boolean removeSearchResponseListener(SearchResponseListener listener) {
        return searchResponseListeners.remove(listener);
    }
    
    /*
     * @see up2p.core.NetworkAdapter#removeSearchMetricListener(up2p.search.SearchMetricListener)
     */
    public boolean removeSearchMetricListener(SearchMetricListener listener) {
        return searchMetricListeners.remove(listener);
    }

    
    /**
     *  Download a remote file from its URL, store it in the provided file
     * @param url a http URL http://[host]:[port]/[up2p node name]/community/[communityId]/[resourceId]
     * @param downloadFile File where the downloaded file should be placed
     * @return	The file where the completed download was saved (may be renamed from the provided
     * 			downloadFile to ensure a unique filename), or null if the download could not be
     * 			completed.
     */
    public File retrieveFromURL(String url, File downloadFile) throws NetworkAdapterException  {
    	try {
    		URL locationURL = new URL(url);

    		if (!locationURL.getProtocol().equals(HTTP_PROTOCOL)) {
    			// unsupported protocol
    			LOG.info("BasePeerNetworkAdapter: Download location "
    					+ "has unsupported protocol. Protocol: "
    					+ locationURL.getProtocol() + " Location: "
    					+ locationURL.toString());
    			return null;
    		} else {
    			HttpURLConnection connection = (HttpURLConnection)locationURL.openConnection();
    			connection.setConnectTimeout(1000);

    			// open the connection
    			connection.connect();

    			if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
    				// write the file to disk
    				downloadFile = FileUtil.createUniqueFile(downloadFile);
    				
    				LOG.info("BasePeerNetworkAdapter: Downloading "
    						+ url + " to local file "
    						+ downloadFile.getAbsolutePath());

    				// make parent directory if necessary
    				if (!downloadFile.getParentFile().exists())
    					downloadFile.getParentFile().mkdirs();

    				FileUtil.readFileFromStream(
    						connection.getInputStream(), downloadFile, true);
    				LOG.info("BasePeerNetworkAdapter: Download complete.");
    				return downloadFile;
    			} else {
    				LOG.info("BasePeerNetworkAdapter: Retrieve of "
    						+ locationURL.toExternalForm()
    						+ " failed: "
    						+ connection
    						.getResponseCode()
    						+ " "
    						+ connection
    						.getResponseMessage());

    			} 

    		}
    	}
    	catch (Exception e){
    		LOG.error("BasePeerNetworkAdapter::retrievefromURL: got error:"+ e);
    		throw new NetworkAdapterException(e.toString());
    	}
    	return null;
    }
    
    /*
     * @see up2p.core.NetworkAdapter#retrieve(SearchResponse,File)
     * 
     * Note: As far as I can tell this is never actually used, but I'm leaving it
     * 		 for now
     */
    public File retrieve(SearchResponse response, File downloadDirectory)
            throws NetworkAdapterException {
        LocationEntry[] locations = response.getLocations();
        boolean downloadSuccess = false;
        int i = 0;
        File outputFile = new File(downloadDirectory
                .getAbsolutePath()
                + File.separator + response.getFileName());
        

        /*
         * Go through the location list and try to download from each location
         * until the list is exhausted or the file is successfully downloaded.
         * The list is tried from start to finish with no preference for the
         * best URL to use.
         */
        while (!downloadSuccess && i < locations.length) {
            try {
                URL locationURL = new URL(
                		"http://" + locations[i++].getLocationString()
                		+ "retrieve?" + HttpParams.UP2P_RESOURCE + "=" + response.getId()
                		+ "&" + HttpParams.UP2P_COMMUNITY + "=" + response.getCommunityId());
                if (!locationURL.getProtocol().equals(HTTP_PROTOCOL)) {
                    // unsupported protocol
                    LOG.info("BasePeerNetworkAdapter: Download location "
                            + "has unsupported protocol. Protocol: "
                            + locationURL.getProtocol() + " Location: "
                            + locationURL.toString());
                } else {
                    HttpURLConnection connection = (HttpURLConnection) locationURL
                            .openConnection();

                    // open the connection
                    connection.connect();

                    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                        // write the file to disk
                        outputFile = new File(downloadDirectory
                                .getAbsolutePath()
                                + File.separator + response.getFileName());
                        // create unique download location
                        //outputFile = FileUtil.createUniqueFile(outputFile);
						LOG.info("BasePeerNetworkAdapter: Downloading "
                                + response.getId() + " to local file "
                                + outputFile.getAbsolutePath());

                        // make parent directory if necessary
                        if (!outputFile.getParentFile().exists())
                            outputFile.getParentFile().mkdirs();

                        FileUtil.readFileFromStream(
                                connection.getInputStream(), outputFile, true);
                        LOG.info("BasePeerNetworkAdapter: Download complete.");
                        // mark success for the download
                        downloadSuccess = true;
                    } else {
                        LOG.info("BasePeerNetworkAdapter: Retrieve of "
                                + locationURL.toExternalForm()
                                + " failed: "
                                + connection
                                        .getResponseCode()
                                + " "
                                + connection
                                        .getResponseMessage());
                    }
                }
            } catch (MalformedURLException e) {
                LOG.error("BasePeerNetworkAdapter: Malformed download URL.", e);
            } catch (IOException e) {
                LOG.error("BasePeerNetworkAdapter: Error downloading"
                        + " a resource.", e);
            }
        }
        if (!downloadSuccess) {
            LOG.warn("BasePeerNetworkAdapter: Failed to retrieve file from "
                    + "any of the provided URLs.");
            throw new NetworkAdapterException("Failed to retrieve resource"
                    + " from the network. No sources available.");
        }
        return outputFile;
    }

    /*
     * @see up2p.core.NetworkAdapter#retrieveAttachment(String, File)
     */
    public void retrieveAttachment(String attachmentUrlString, File downloadFile)
            throws NetworkAdapterException {
        LOG.info("BasePeerNetworkAdapter: Downloading attachment from URL "
                + attachmentUrlString + " to file " + downloadFile.getAbsolutePath());
        try {
            // create new file
            if (!downloadFile.createNewFile())
                throw new NetworkAdapterException(
                        "Local file already exists or cannot be created: "
                                + downloadFile.getAbsolutePath());
            if (!downloadFile.canWrite())
                throw new NetworkAdapterException(
                        "Cannot write to local file: "
                                + downloadFile.getAbsolutePath());

            // attachment found - use HTTP protocol
            // Add HTTP prefix if it is missing
            if(!attachmentUrlString.startsWith("http://")) {
            	attachmentUrlString = "http://" + attachmentUrlString;
            }
            URL attachmentUrl = new URL(attachmentUrlString);
            
            //LOG.debug("Encoded URL:"+attachmentURL);

            // create connection to server
            HttpURLConnection attachConnection = (HttpURLConnection) attachmentUrl
                    .openConnection();
            attachConnection.connect();
            if (attachConnection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                LOG
                        .error("BasePeerNetworkAdapter: Error download attachment. Response: "
                                + attachConnection.getResponseCode()
                                + " "
                                + attachConnection.getResponseMessage());
                throw new NetworkAdapterException(
                        "Error downloading attachment.<br>URL: "
                                + attachmentUrl + "<br>Response: "
                                + attachConnection.getResponseMessage());
            }

            // download the file
            FileUtil.readFileFromStream(attachConnection.getInputStream(),
                    downloadFile, true);
            LOG.info("BasePeerNetworkAdapter: Downloaded "
                    + downloadFile.getName());
        } catch (MalformedURLException e) {
            LOG.error("BasePeerNetworkAdapter: Malformed attachment URL: "
                    + attachmentUrlString, e);
            throw new NetworkAdapterException("Malformed attachment URL: "
                    + attachmentUrlString);
        } catch (IOException e) {
            LOG.error("BasePeerNetworkAdapter: Error downloading attachment"
                    + " with URL " + attachmentUrlString, e);
            throw new NetworkAdapterException("Error downloading attachment: "
                    + (e.getCause() != null ? e.getCause().getMessage() : e
                            .getMessage()));
        }
    }

    /*
     * @see up2p.core.NetworkAdapter#setCommunity(java.lang.String)
     */
    public void setCommunity(String communityId) {
        associatedCommunityId = communityId;
    }

    /*
     * @see up2p.core.NetworkAdapter#setNetworkAdapterInfo(up2p.core.NetworkAdapterInfo)
     */
    public void setNetworkAdapterInfo(NetworkAdapterInfo netAdapterInfo) {
        networkAdapterInfo = netAdapterInfo;
    }

    /*
     * @see up2p.core.NetworkAdapter#setProperties(Hashtable)
     */
    public void setProperties(Hashtable<String,String> props) {
        properties.putAll(props);
    }

    /*
     * @see up2p.core.NetworkAdapter#setProperty(String, String)
     */
    public void setProperty(String propertyName, String propertyValue) {
        properties.put(propertyName, propertyValue);
    }

    /*
     * @see up2p.core.NetworkAdapter#setWebAdapter(up2p.core.WebAdapter)
     */
    public void setWebAdapter(Core2Network adapter) {
        this.adapter = adapter;
    }
    /*
     * just so we can see stuff from the jsp
     */
    public Core2Network getWebAdapter() {
        return adapter;
    }

}