package up2p.servlet;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.commons.fileupload.MultipartStream;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.IOUtils;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;

import com.sun.jersey.multipart.BodyPartEntity;

import up2p.core.DefaultWebAdapter;
import up2p.core.DuplicateResourceException;
import up2p.core.NetworkAdapterException;
import up2p.core.ResourceNotFoundException;
import up2p.rest.CommunityResource;
import up2p.servlet.UploadServlet.BatchCopyHandler;
import up2p.util.FileUtil;
import up2p.util.PairList;
import up2p.xml.TransformerHelper;

/**
 * The Push Servlet is responsible for managing incoming HTTP connections
 * generated by Gnutella PUSH requests. When a client connects it submits
 * its peer ID (IP address and port) as parameters of a GET request. The Push
 * Servlet uses these parameters to check the request cache in the WebAdapter
 * and responds with a community and resource ID of a file to be transferred.
 * The remote node should upload these resources using a POST request (to the same servlet), and then attempt
 * another GET connection to the Push Servlet. This process continues until all
 * requested resources are downloaded, at which point the Push Servlet responds
 * with an "OK" handshake and the remote node closes the connection.
 * 
 * @author Alexander Craig
 * @author alan d
 */
public class PushServlet extends UploadServlet {

	
	
	
	
	private void notifyPushTransfer(String cid, String rid){
		//notify download manager that a push-initiated file transfer has just succeeded
		//TODO
	}
	
    /*
     * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest,
     * javax.servlet.http.HttpServletResponse)
     */
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        doPush(req, resp);
    }

    /*
     * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest,
     * javax.servlet.http.HttpServletResponse)
     */
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        doUpload(req, resp);
    }
    
    /**
     * Uses the provided peer ID to check a local cache for any pending
     * resource requests, and responds with a community/resource ID to
     * be downloaded, or an "OK" signal if no further requests are pending.
     * 
     * @see javax.servlet.http.HttpServlet#service(HttpServletRequest,
     * HttpServletResponse)
     */
    protected void doPush(HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
    	String peerId = request.getParameter(HttpParams.UP2P_PEERID);
    	if(peerId == null || peerId.length() == 0) {
    		LOG.error("PushServlet: Connection initiated with no supplied peer Id.");
    		return;
    	}
    	
    	LOG.debug("PushServlet: Got request from peer " + peerId);
    	String resRequest = adapter.getFailedTransfer(peerId);
    	
    	response.setContentType("text/plain");
		PrintWriter out = response.getWriter();
		
    	if(resRequest != null) {
    		// Request is pending
    		adapter.allowPush(resRequest, peerId); // push allowed for a specific resource and specific peer
    		
    		LOG.debug("PushServlet: Responding to peer " + peerId + " with request: " + resRequest);
			out.println("GIV " + resRequest + "\n");
    	} else {
    		// No pending requests for this node, return OK handshake
    		LOG.debug("PushServlet: Responding to peer " + peerId + " with OK handshake.");
    		out.println("OK\n");
    	}
    	
    	return;
    }
    
}